"use strict";(self.webpackChunk_ant_design_pro_editor=self.webpackChunk_ant_design_pro_editor||[]).push([[830],{29491:function(x,p,e){var I;e.r(p),e.d(p,{demos:function(){return T}});var h=e(90228),r=e.n(h),f=e(87999),s=e.n(f),n=e(75271),i=e(10549),c=e(40595),m=e(94283),y=e(6020),g=e(43011),T={"sortabletree-demo-default":{component:n.memo(n.lazy(function(){return e.e(7164).then(e.bind(e,12230))})),asset:{type:"BLOCK",id:"sortabletree-demo-default",refAtomIds:["SortableTree"],dependencies:{"index.tsx":{type:"FILE",value:e(53379).Z},"@ant-design/pro-editor":{type:"NPM",value:"1.2.1"},"./data.ts":{type:"FILE",value:e(86194).Z}},entry:"index.tsx",title:"Basic Usage",description:"Supports default add, delete, and sort operations."},context:{"@ant-design/pro-editor":i,"/home/runner/work/pro-editor/pro-editor/src/SortableTree/demos/data.ts":c},renderOpts:{compile:function(){var d=s()(r()().mark(function l(){var a,u=arguments;return r()().wrap(function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,e.e(6495).then(e.bind(e,86495));case 2:return t.abrupt("return",(a=t.sent).default.apply(a,u));case 3:case"end":return t.stop()}},l)}));function o(){return d.apply(this,arguments)}return o}()}},"sortabletree-demo-controlled":{component:n.memo(n.lazy(function(){return e.e(7164).then(e.bind(e,6862))})),asset:{type:"BLOCK",id:"sortabletree-demo-controlled",refAtomIds:["SortableTree"],dependencies:{"index.tsx":{type:"FILE",value:e(33445).Z},"@ant-design/pro-editor":{type:"NPM",value:"1.2.1"},react:{type:"NPM",value:"18.3.1"},"./data.ts":{type:"FILE",value:e(86194).Z}},entry:"index.tsx",title:"Controlled Mode"},context:{"@ant-design/pro-editor":i,react:I||(I=e.t(n,2)),"/home/runner/work/pro-editor/pro-editor/src/SortableTree/demos/data.ts":c},renderOpts:{compile:function(){var d=s()(r()().mark(function l(){var a,u=arguments;return r()().wrap(function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,e.e(6495).then(e.bind(e,86495));case 2:return t.abrupt("return",(a=t.sent).default.apply(a,u));case 3:case"end":return t.stop()}},l)}));function o(){return d.apply(this,arguments)}return o}()}},"sortabletree-demo-rendercontent":{component:n.memo(n.lazy(function(){return e.e(7164).then(e.bind(e,2252))})),asset:{type:"BLOCK",id:"sortabletree-demo-rendercontent",refAtomIds:["SortableTree"],dependencies:{"index.tsx":{type:"FILE",value:e(25434).Z},"@ant-design/pro-editor":{type:"NPM",value:"1.2.1"},antd:{type:"NPM",value:"5.12.8"},react:{type:"NPM",value:"18.3.1"},"react-layout-kit":{type:"NPM",value:"1.9.0"},"./data.ts":{type:"FILE",value:e(86194).Z}},entry:"index.tsx",title:"Custom Content",description:"Customize rendering using renderContent"},context:{"@ant-design/pro-editor":i,antd:m,react:I||(I=e.t(n,2)),"react-layout-kit":y,"/home/runner/work/pro-editor/pro-editor/src/SortableTree/demos/data.ts":c},renderOpts:{compile:function(){var d=s()(r()().mark(function l(){var a,u=arguments;return r()().wrap(function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,e.e(6495).then(e.bind(e,86495));case 2:return t.abrupt("return",(a=t.sent).default.apply(a,u));case 3:case"end":return t.stop()}},l)}));function o(){return d.apply(this,arguments)}return o}()}},"sortabletree-demo-disabledrag":{component:n.memo(n.lazy(function(){return e.e(7164).then(e.bind(e,14305))})),asset:{type:"BLOCK",id:"sortabletree-demo-disabledrag",refAtomIds:["SortableTree"],dependencies:{"index.tsx":{type:"FILE",value:e(66179).Z},"@ant-design/pro-editor":{type:"NPM",value:"1.2.1"},"./data.ts":{type:"FILE",value:e(86194).Z}},entry:"index.tsx",title:"Disable Drag"},context:{"@ant-design/pro-editor":i,"/home/runner/work/pro-editor/pro-editor/src/SortableTree/demos/data.ts":c},renderOpts:{compile:function(){var d=s()(r()().mark(function l(){var a,u=arguments;return r()().wrap(function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,e.e(6495).then(e.bind(e,86495));case 2:return t.abrupt("return",(a=t.sent).default.apply(a,u));case 3:case"end":return t.stop()}},l)}));function o(){return d.apply(this,arguments)}return o}()}},"sortabletree-demo-sortablerule":{component:n.memo(n.lazy(function(){return e.e(7164).then(e.bind(e,73436))})),asset:{type:"BLOCK",id:"sortabletree-demo-sortablerule",refAtomIds:["SortableTree"],dependencies:{"index.tsx":{type:"FILE",value:e(45056).Z},"@ant-design/pro-editor":{type:"NPM",value:"1.2.1"},antd:{type:"NPM",value:"5.12.8"},"./data.ts":{type:"FILE",value:e(86194).Z}},entry:"index.tsx",title:"Custom Sortable Rule",description:"Customize whether it is draggable through a function rule"},context:{"@ant-design/pro-editor":i,antd:m,"/home/runner/work/pro-editor/pro-editor/src/SortableTree/demos/data.ts":c},renderOpts:{compile:function(){var d=s()(r()().mark(function l(){var a,u=arguments;return r()().wrap(function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,e.e(6495).then(e.bind(e,86495));case 2:return t.abrupt("return",(a=t.sent).default.apply(a,u));case 3:case"end":return t.stop()}},l)}));function o(){return d.apply(this,arguments)}return o}()}},"sortabletree-demo-virtual":{component:n.memo(n.lazy(function(){return e.e(7164).then(e.bind(e,75143))})),asset:{type:"BLOCK",id:"sortabletree-demo-virtual",refAtomIds:["SortableTree"],dependencies:{"index.tsx":{type:"FILE",value:e(49375).Z},"@ant-design/pro-editor":{type:"NPM",value:"1.2.1"},"./data/virtual.ts":{type:"FILE",value:e(97739).Z}},entry:"index.tsx",title:"Virtual Scroll",description:"Use the virtual configuration for virtual scrolling when dealing with large amounts of data"},context:{"@ant-design/pro-editor":i,"/home/runner/work/pro-editor/pro-editor/src/SortableTree/demos/data/virtual.ts":g},renderOpts:{compile:function(){var d=s()(r()().mark(function l(){var a,u=arguments;return r()().wrap(function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,e.e(6495).then(e.bind(e,86495));case 2:return t.abrupt("return",(a=t.sent).default.apply(a,u));case 3:case"end":return t.stop()}},l)}));function o(){return d.apply(this,arguments)}return o}()}}}},38551:function(x,p,e){e.r(p),e.d(p,{texts:function(){return I}});const I=[{value:"A sortable tree component that conforms to the data structure of Ant Design ",paraId:0,tocIndex:0},{value:"Tree",paraId:0,tocIndex:0},{value:".",paraId:0,tocIndex:0},{value:"Name",paraId:1,tocIndex:8},{value:"Type",paraId:1,tocIndex:8},{value:"Description",paraId:1,tocIndex:8},{value:"hideAdd",paraId:1,tocIndex:8},{value:"boolean",paraId:1,tocIndex:8},{value:"Hide the default add button",paraId:1,tocIndex:8},{value:"hideRemove",paraId:1,tocIndex:8},{value:"boolean",paraId:1,tocIndex:8},{value:"Hide the default remove button",paraId:1,tocIndex:8},{value:"disableDrag",paraId:1,tocIndex:8},{value:"boolean",paraId:1,tocIndex:8},{value:"Disable drag",paraId:1,tocIndex:8},{value:"indentationWidth",paraId:1,tocIndex:8},{value:"number",paraId:1,tocIndex:8},{value:"Indentation width",paraId:1,tocIndex:8},{value:"onSelectedIdsChange",paraId:1,tocIndex:8},{value:"(selectedIds: UniqueIdentifier[]) => void",paraId:1,tocIndex:8},{value:"Callback for selected ID changes",paraId:1,tocIndex:8},{value:"treeData",paraId:1,tocIndex:8},{value:"TreeData<T>",paraId:1,tocIndex:8},{value:"Tree data",paraId:1,tocIndex:8},{value:"defaultTreeData",paraId:1,tocIndex:8},{value:"TreeData<T>",paraId:1,tocIndex:8},{value:"Default data",paraId:1,tocIndex:8},{value:"onTreeDataChange",paraId:1,tocIndex:8},{value:"(treeData: TreeData<T>,event: TreeDataDispatchPayload) => void",paraId:1,tocIndex:8},{value:"Callback for data changes",paraId:1,tocIndex:8},{value:"renderContent",paraId:1,tocIndex:8},{value:"(node: FlattenNode<T>) => JSX.Element",paraId:1,tocIndex:8},{value:"Render content",paraId:1,tocIndex:8},{value:"renderExtra",paraId:1,tocIndex:8},{value:"(node: FlattenNode<T>) => JSX.Element",paraId:1,tocIndex:8},{value:"Render extra item",paraId:1,tocIndex:8},{value:"ref",paraId:1,tocIndex:8},{value:"MutableRefObject<SortableTreeInstance<T>>",paraId:1,tocIndex:8},{value:"Expose methods externally",paraId:1,tocIndex:8},{value:"sortableRule",paraId:1,tocIndex:8},{value:"data: { activeNode: FlattenNode<T>; targetNode: FlattenNode<T>; projected: Projected; }) => boolean",paraId:1,tocIndex:8},{value:"Function to control drag and drop sorting",paraId:1,tocIndex:8},{value:"virtual",paraId:1,tocIndex:8},{value:"VirtualConfig",paraId:1,tocIndex:8},{value:" | ",paraId:1,tocIndex:8},{value:"false",paraId:1,tocIndex:8},{value:"Virtual scroll configuration, default is false",paraId:1,tocIndex:8},{value:"Virtual scroll configuration",paraId:2,tocIndex:9},{value:"Name",paraId:3,tocIndex:9},{value:"Type",paraId:3,tocIndex:9},{value:"Description",paraId:3,tocIndex:9},{value:"height",paraId:3,tocIndex:9},{value:"number",paraId:3,tocIndex:9},{value:"Height of the virtual scroll container, required",paraId:3,tocIndex:9},{value:"width",paraId:3,tocIndex:9},{value:"number",paraId:3,tocIndex:9},{value:"| ",paraId:3,tocIndex:9},{value:"string",paraId:3,tocIndex:9},{value:"Width of the virtual scroll container, default is 100%",paraId:3,tocIndex:9},{value:"itemHeight",paraId:3,tocIndex:9},{value:"(index: number) => number",paraId:3,tocIndex:9},{value:"Item height, default is 36",paraId:3,tocIndex:9},{value:"Tree node",paraId:4,tocIndex:10},{value:"Name",paraId:5,tocIndex:10},{value:"Type",paraId:5,tocIndex:10},{value:"Description",paraId:5,tocIndex:10},{value:"id",paraId:5,tocIndex:10},{value:"UniqueIdentifier",paraId:5,tocIndex:10},{value:"Node ID",paraId:5,tocIndex:10},{value:"children",paraId:5,tocIndex:10},{value:"TreeNode<T>[]",paraId:5,tocIndex:10},{value:"List of child nodes",paraId:5,tocIndex:10},{value:"collapsed",paraId:5,tocIndex:10},{value:"boolean",paraId:5,tocIndex:10},{value:"Whether the group is collapsed",paraId:5,tocIndex:10},{value:"showExtra",paraId:5,tocIndex:10},{value:"boolean",paraId:5,tocIndex:10},{value:"Whether to show extra area",paraId:5,tocIndex:10},{value:"content",paraId:5,tocIndex:10},{value:"T",paraId:5,tocIndex:10},{value:"Node data",paraId:5,tocIndex:10},{value:"Flattened node",paraId:6,tocIndex:11},{value:"Name",paraId:7,tocIndex:11},{value:"Type",paraId:7,tocIndex:11},{value:"Description",paraId:7,tocIndex:11},{value:"parentId",paraId:7,tocIndex:11},{value:"UniqueIdentifier",paraId:7,tocIndex:11},{value:" | ",paraId:7,tocIndex:11},{value:"null",paraId:7,tocIndex:11},{value:"Parent node ID, null if it is a root node",paraId:7,tocIndex:11},{value:"depth",paraId:7,tocIndex:11},{value:"number",paraId:7,tocIndex:11},{value:"Node depth",paraId:7,tocIndex:11},{value:"index",paraId:7,tocIndex:11},{value:"number",paraId:7,tocIndex:11},{value:"Position of the node among sibling nodes",paraId:7,tocIndex:11},{value:"Placement target information",paraId:8,tocIndex:12},{value:"Name",paraId:9,tocIndex:12},{value:"Type",paraId:9,tocIndex:12},{value:"Description",paraId:9,tocIndex:12},{value:"depth",paraId:9,tocIndex:12},{value:"number",paraId:9,tocIndex:12},{value:"Depth of the placement target",paraId:9,tocIndex:12},{value:"maxDepth",paraId:9,tocIndex:12},{value:"number",paraId:9,tocIndex:12},{value:"Maximum depth the target can be placed",paraId:9,tocIndex:12},{value:"minDepth",paraId:9,tocIndex:12},{value:"number",paraId:9,tocIndex:12},{value:"Minimum depth the target can be placed",paraId:9,tocIndex:12},{value:"parentId",paraId:9,tocIndex:12},{value:"UniqueIdentifier",paraId:9,tocIndex:12},{value:" | ",paraId:9,tocIndex:12},{value:"null",paraId:9,tocIndex:12},{value:"Parent node ID, null if it is a root node",paraId:9,tocIndex:12},{value:"SortableTree instance object, type definition reference:",paraId:10,tocIndex:13},{value:`export interface SortableTreeInstance<T = any> extends PublicSortableTreeStore {
  /**
   * Get the id of the currently active node
   * @returns The id of the currently active node
   */
  getActiveId: () => UniqueIdentifier;
  /**
   * Get an array of ids of the currently selected nodes
   * @returns An array of ids of the currently selected nodes
   */
  getSelectedIds: () => UniqueIdentifier[];
  /**
   * Get the current tree data
   * @returns The current tree data
   */
  getTreeData: () => TreeData<T>;
  /**
   * Get the flattened data of the current tree
   * @returns The flattened data of the current tree
   */
  getFlattenData: () => FlattenNode<T>[];
}
`,paraId:11,tocIndex:13}]}}]);
